import type { ProjectManifestVersionUpdate } from './manifest.types.js';
export * from './manifest.types.js';
/**
 * A base class for project manifests.
 * Represents a manifest file for a project that contains information like the project name, version, and other metadata.
 */
export declare abstract class ProjectManifest<T = Record<string, unknown>> {
    manifestPath: string;
    /**
     * The name of the manifest file.
     */
    static Filename: string;
    /**
     * The path to the directory containing the manifest file.
     */
    projectPath: string;
    /**
     * The string contents of the manifest file.
     */
    abstract contents: string | undefined;
    /**
     * The parsed contents of the manifest file.
     */
    abstract manifest: T | undefined;
    /**
     * Creates a new instance of the project manifest.
     * @param manifestPath - The path to the manifest file.
     */
    constructor(manifestPath: string);
    /**
     * Read the manifest file and return its contents.
     */
    abstract readManifest(): Promise<T>;
    /**
     * Read project name from the manifest.
     */
    abstract getName(): Promise<string>;
    /**
     * Read project version from the manifest.
     */
    abstract getVersion(): Promise<string>;
    getPrereleaseVersion(): Promise<readonly (string | number)[] | null>;
    /**
     * Read whether the project is private from the manifest.
     */
    abstract isPrivate(): Promise<boolean>;
    /**
     * Write version to the manifest.
     * @param version - The new version to write to the manifest.
     * @param dryRun - If true, the version will not be written to the manifest file but will be updated in memory.
     */
    abstract writeVersion(version: string, dryRun?: boolean): Promise<ProjectManifestVersionUpdate>;
}
//# sourceMappingURL=manifest.d.ts.map