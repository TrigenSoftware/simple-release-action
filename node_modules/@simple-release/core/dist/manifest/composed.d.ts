import { ProjectManifest } from './manifest.js';
/**
 * A class that represents a compositon of multiple project manifests.
 * It is used to manage multiple project manifests as a single entity.
 * Information is used from the main manifest, while the sub manifest are also used to update the version.
 */
export declare class ComposedProjectManifest<T = Record<string, unknown>> extends ProjectManifest<T> {
    mainManifest: ProjectManifest<T>;
    subManifests: ProjectManifest[];
    /**
     * Creates a new instance of the composed project manifest.
     * @param mainManifest - The main project manifest to use for reading information.
     * @param subManifests - The sub project manifest to use for writing information.
     */
    constructor(mainManifest: ProjectManifest<T>, subManifests: ProjectManifest[]);
    readManifest(): Promise<T>;
    get contents(): string | undefined;
    get manifest(): T | undefined;
    getName(): Promise<string>;
    getVersion(): Promise<string>;
    isPrivate(): Promise<boolean>;
    writeVersion(version: string, dryRun?: boolean): Promise<import("./manifest.types.js").ProjectManifestVersionUpdate>;
}
//# sourceMappingURL=composed.d.ts.map