import fs from 'fs/promises';
import { join } from 'path';
import os from 'os';
import semver, {} from 'semver';
export async function isFileExists(filePath) {
    try {
        await fs.stat(filePath);
        return true;
    }
    catch (err) {
        if (err.code === 'ENOENT') {
            return false;
        }
        throw err;
    }
}
const HASH_BASE = 36;
export function tmpfile(prefix) {
    return join(os.tmpdir(), `${prefix}-${Math.random().toString(HASH_BASE).slice(2)}`);
}
const nonPreReleaseTypes = [
    'patch',
    'minor',
    'major'
];
function getTypePriority(type) {
    return nonPreReleaseTypes.indexOf(type);
}
function getCurrentActiveType(version) {
    for (const type of nonPreReleaseTypes) {
        if (semver[type](version)) {
            return type;
        }
    }
    return undefined;
}
export function getReleaseType(releaseType, version, prerelease) {
    if (typeof prerelease === 'string') {
        if (Array.isArray(semver.prerelease(version))) {
            const currentActiveType = getCurrentActiveType(version);
            if (currentActiveType === releaseType
                || getTypePriority(currentActiveType) > getTypePriority(releaseType)) {
                return 'prerelease';
            }
        }
        return `pre${releaseType}`;
    }
    return releaseType;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sYUFBYSxDQUFBO0FBQzVCLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxNQUFNLENBQUE7QUFDM0IsT0FBTyxFQUFFLE1BQU0sSUFBSSxDQUFBO0FBQ25CLE9BQU8sTUFBTSxFQUFFLEVBQW9CLE1BQU0sUUFBUSxDQUFBO0FBRWpELE1BQU0sQ0FBQyxLQUFLLFVBQVUsWUFBWSxDQUFDLFFBQWdCO0lBQ2pELElBQUksQ0FBQztRQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUN2QixPQUFPLElBQUksQ0FBQTtJQUNiLENBQUM7SUFBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSyxHQUF3QixDQUFDLElBQUksS0FBSyxRQUFRLEVBQUUsQ0FBQztZQUNoRCxPQUFPLEtBQUssQ0FBQTtRQUNkLENBQUM7UUFFRCxNQUFNLEdBQUcsQ0FBQTtJQUNYLENBQUM7QUFDSCxDQUFDO0FBRUQsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFBO0FBRXBCLE1BQU0sVUFBVSxPQUFPLENBQUMsTUFBYztJQUNwQyxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUUsR0FBRyxNQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFBO0FBQ3JGLENBQUM7QUFFRCxNQUFNLGtCQUFrQixHQUFHO0lBQ3pCLE9BQU87SUFDUCxPQUFPO0lBQ1AsT0FBTztDQUNDLENBQUE7QUFFVixTQUFTLGVBQWUsQ0FBQyxJQUE2QjtJQUNwRCxPQUFPLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxJQUF5QyxDQUFDLENBQUE7QUFDOUUsQ0FBQztBQUVELFNBQVMsb0JBQW9CLENBQUMsT0FBZTtJQUMzQyxLQUFLLE1BQU0sSUFBSSxJQUFJLGtCQUFrQixFQUFFLENBQUM7UUFDdEMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUMxQixPQUFPLElBQUksQ0FBQTtRQUNiLENBQUM7SUFDSCxDQUFDO0lBRUQsT0FBTyxTQUFTLENBQUE7QUFDbEIsQ0FBQztBQUVELE1BQU0sVUFBVSxjQUFjLENBQzVCLFdBQXdCLEVBQ3hCLE9BQWUsRUFDZixVQUFtQjtJQUVuQixJQUFJLE9BQU8sVUFBVSxLQUFLLFFBQVEsRUFBRSxDQUFDO1FBQ25DLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUM5QyxNQUFNLGlCQUFpQixHQUFHLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxDQUFBO1lBRXZELElBQUksaUJBQWlCLEtBQUssV0FBVzttQkFDaEMsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsZUFBZSxDQUFDLFdBQVcsQ0FBQyxFQUNwRSxDQUFDO2dCQUNELE9BQU8sWUFBWSxDQUFBO1lBQ3JCLENBQUM7UUFDSCxDQUFDO1FBRUQsT0FBTyxNQUFNLFdBQVcsRUFBaUIsQ0FBQTtJQUMzQyxDQUFDO0lBRUQsT0FBTyxXQUFXLENBQUE7QUFDcEIsQ0FBQyJ9