import { join } from 'path';
import { ConventionalGitClient } from '@conventional-changelog/git-client';
import { Bumper } from 'conventional-recommended-bump';
import { ConventionalChangelog } from 'conventional-changelog';
import { concatStringStream } from '@simple-libs/stream-utils';
import { parseHostedGitUrl } from '@simple-libs/hosted-git-info';
import semver, {} from 'semver';
import { addReleaseNotes, extractLastRelease, extractLastReleaseFromFile } from '../change-log.js';
import { getReleaseType } from '../utils.js';
export * from './project.types.js';
export const bumpDefaultOptions = {
    preset: {
        name: 'conventionalcommits',
        bumpStrict: true
    }
};
/**
 * A base class that represents a project.
 */
export class Project {
    /**
     * The manifest of the project.
     */
    manifest;
    /**
     * The git client used to interact with the repository.
     */
    gitClient;
    options;
    /**
     * Changed files after interacting with the project.
     */
    changedFiles = [];
    /**
     * Version updates after interacting with the project.
     */
    versionUpdates = [];
    /**
     * Creates a new instance of the project.
     * @param options - The options to use for the project.
     */
    constructor(options) {
        const { manifest, compose, gitClient = new ConventionalGitClient(manifest.projectPath) } = options;
        this.options = {
            changelogFile: 'CHANGELOG.md',
            ...options
        };
        this.manifest = compose ? compose(manifest) : manifest;
        this.gitClient = gitClient;
    }
    /**
     * Get the hosted git information for the project.
     * @returns The hosted git information.
     */
    async getHostedGitInfo() {
        const remote = await this.gitClient.getConfig('remote.origin.url');
        const info = parseHostedGitUrl(remote);
        return info;
    }
    /**
     * Get the commit message for the version updates.
     * @returns The commit message.
     */
    getCommitMessage() {
        const { versionUpdates } = this;
        if (versionUpdates.length === 0) {
            throw new Error('Nothing to commit');
        }
        return `chore(release): ${versionUpdates[0].to}`;
    }
    /**
     * Get new git tags for the version updates.
     * @param options - The options to use for getting the tags.
     * @returns The new git tags.
     */
    async getTags(options = {}) {
        const { manifest, gitClient } = this;
        const { tagPrefix = 'v', verify = true } = options;
        const version = await manifest.getVersion();
        const tag = `${tagPrefix}${version}`;
        if (verify) {
            const isTagExists = await gitClient.verify(tag, true);
            if (isTagExists) {
                return [];
            }
        }
        return [tag];
    }
    /**
     * Get the release data for the project.
     * @param options - The options to use for getting the release data.
     * @returns The release data.
     */
    async getReleaseData(options = {}) {
        const { manifest, versionUpdates } = this;
        const { changelogFile } = this.options;
        const { projectPath } = manifest;
        const changelogPath = join(projectPath, changelogFile);
        const version = await manifest.getVersion();
        const isPrerelease = Boolean(await manifest.getPrereleaseVersion());
        const lastRelease = versionUpdates.length
            ? await extractLastRelease(versionUpdates[0].notes)
            : await extractLastReleaseFromFile(changelogPath);
        if (!lastRelease || lastRelease.version && lastRelease.version !== version) {
            return [];
        }
        if (!lastRelease.nextTag) {
            const tags = await this.getTags({
                ...options,
                verify: false
            });
            if (tags.length) {
                [lastRelease.nextTag] = tags;
            }
        }
        return [
            {
                ...lastRelease,
                title: `v${version}`,
                version,
                isPrerelease
            }
        ];
    }
    /**
     * Get the next version for the project.
     * @param options - The options to use for getting the next version.
     * @returns The next version.
     */
    async getNextVersion(options = {}) {
        const { gitClient, manifest } = this;
        if (options.skip || !options.force && await manifest.isPrivate()) {
            return null;
        }
        const { projectPath } = manifest;
        const { version: forcedVersion, baseVersion, as, prerelease, firstRelease: firstReleaseOption, tagPrefix, preset = bumpDefaultOptions.preset } = options;
        let firstRelease = firstReleaseOption;
        if (forcedVersion && semver.valid(forcedVersion)) {
            return forcedVersion;
        }
        if (typeof firstRelease === 'undefined') {
            firstRelease = !await gitClient.getLastTag({
                path: projectPath
            });
        }
        const version = baseVersion || await manifest.getVersion();
        if (firstRelease) {
            return version;
        }
        let releaseType = null;
        if (as) {
            releaseType = as;
        }
        else {
            const bump = await new Bumper(gitClient)
                .loadPreset(preset, _ => import(_))
                .commits({
                path: projectPath
            })
                .tag({
                prefix: tagPrefix
            })
                .bump();
            if ('releaseType' in bump) {
                releaseType = bump.releaseType;
            }
        }
        if (!releaseType) {
            return null;
        }
        const nextVersion = semver.inc(version, getReleaseType(releaseType, version, prerelease), prerelease);
        return nextVersion;
    }
    /**
     * Bump the version of the project.
     * @param options - The options to use for bumping the version.
     * @returns Whether the version was bumped.
     */
    async bump(options = {}) {
        const nextVersion = await this.getNextVersion(options);
        if (!nextVersion) {
            return false;
        }
        const { gitClient, manifest } = this;
        const { changelogFile } = this.options;
        const { tagPrefix, preset = bumpDefaultOptions.preset, dryRun, logger } = options;
        const { projectPath } = manifest;
        const version = await manifest.getVersion();
        const versionUpdate = {
            ...await manifest.writeVersion(nextVersion, dryRun),
            notes: ''
        };
        this.changedFiles.push(...versionUpdate.files);
        const changelogPath = join(projectPath, changelogFile);
        const name = await manifest.getName();
        if (version === nextVersion) {
            logger?.verbose(`${name}: ${nextVersion}`);
        }
        else {
            logger?.verbose(`${name}: ${version} -> ${nextVersion}`);
        }
        const notes = new ConventionalChangelog(gitClient)
            .loadPreset(preset, _ => import(_))
            .commits({
            path: projectPath
        })
            .tags({
            prefix: tagPrefix
        })
            .readRepository()
            .context({
            version: nextVersion
        })
            .write();
        versionUpdate.notes = dryRun
            ? await concatStringStream(notes)
            : await addReleaseNotes(changelogPath, notes);
        logger?.verbose(`Release notes:\n\n${versionUpdate.notes}`);
        this.changedFiles.push(changelogPath);
        this.versionUpdates.push(versionUpdate);
        return true;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvamVjdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcm9qZWN0L3Byb2plY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLE1BQU0sQ0FBQTtBQUMzQixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQTtBQUMxRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sK0JBQStCLENBQUE7QUFDdEQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sd0JBQXdCLENBQUE7QUFDOUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sMkJBQTJCLENBQUE7QUFDOUQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sOEJBQThCLENBQUE7QUFDaEUsT0FBTyxNQUFNLEVBQUUsRUFBb0IsTUFBTSxRQUFRLENBQUE7QUFFakQsT0FBTyxFQUNMLGVBQWUsRUFDZixrQkFBa0IsRUFDbEIsMEJBQTBCLEVBQzNCLE1BQU0sa0JBQWtCLENBQUE7QUFFekIsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGFBQWEsQ0FBQTtBQVU1QyxjQUFjLG9CQUFvQixDQUFBO0FBRWxDLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHO0lBQ2hDLE1BQU0sRUFBRTtRQUNOLElBQUksRUFBRSxxQkFBcUI7UUFDM0IsVUFBVSxFQUFFLElBQUk7S0FDakI7Q0FDRixDQUFBO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLE9BQWdCLE9BQU87SUFDM0I7O09BRUc7SUFDSCxRQUFRLENBQWlCO0lBQ3pCOztPQUVHO0lBQ0gsU0FBUyxDQUF1QjtJQUNoQyxPQUFPLENBQWdCO0lBQ3ZCOztPQUVHO0lBQ0gsWUFBWSxHQUFhLEVBQUUsQ0FBQTtJQUMzQjs7T0FFRztJQUNILGNBQWMsR0FBMkIsRUFBRSxDQUFBO0lBRTNDOzs7T0FHRztJQUNILFlBQVksT0FBdUI7UUFDakMsTUFBTSxFQUNKLFFBQVEsRUFDUixPQUFPLEVBQ1AsU0FBUyxHQUFHLElBQUkscUJBQXFCLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxFQUM1RCxHQUFHLE9BQU8sQ0FBQTtRQUVYLElBQUksQ0FBQyxPQUFPLEdBQUc7WUFDYixhQUFhLEVBQUUsY0FBYztZQUM3QixHQUFHLE9BQU87U0FDWCxDQUFBO1FBQ0QsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFBO1FBQ3RELElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFBO0lBQzVCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxLQUFLLENBQUMsZ0JBQWdCO1FBQ3BCLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsQ0FBQTtRQUNsRSxNQUFNLElBQUksR0FBRyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUV0QyxPQUFPLElBQUksQ0FBQTtJQUNiLENBQUM7SUFFRDs7O09BR0c7SUFDSCxnQkFBZ0I7UUFDZCxNQUFNLEVBQUUsY0FBYyxFQUFFLEdBQUcsSUFBSSxDQUFBO1FBRS9CLElBQUksY0FBYyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDL0IsTUFBTSxJQUFJLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFBO1NBQ3JDO1FBRUQsT0FBTyxtQkFBbUIsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFBO0lBQ2xELENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUE4QixFQUFFO1FBQzVDLE1BQU0sRUFDSixRQUFRLEVBQ1IsU0FBUyxFQUNWLEdBQUcsSUFBSSxDQUFBO1FBQ1IsTUFBTSxFQUNKLFNBQVMsR0FBRyxHQUFHLEVBQ2YsTUFBTSxHQUFHLElBQUksRUFDZCxHQUFHLE9BQU8sQ0FBQTtRQUNYLE1BQU0sT0FBTyxHQUFHLE1BQU0sUUFBUSxDQUFDLFVBQVUsRUFBRSxDQUFBO1FBQzNDLE1BQU0sR0FBRyxHQUFHLEdBQUcsU0FBUyxHQUFHLE9BQU8sRUFBRSxDQUFBO1FBRXBDLElBQUksTUFBTSxFQUFFO1lBQ1YsTUFBTSxXQUFXLEdBQUcsTUFBTSxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQTtZQUVyRCxJQUFJLFdBQVcsRUFBRTtnQkFDZixPQUFPLEVBQUUsQ0FBQTthQUNWO1NBQ0Y7UUFFRCxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDZCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILEtBQUssQ0FBQyxjQUFjLENBQUMsVUFBaUMsRUFBRTtRQUN0RCxNQUFNLEVBQ0osUUFBUSxFQUNSLGNBQWMsRUFDZixHQUFHLElBQUksQ0FBQTtRQUNSLE1BQU0sRUFBRSxhQUFhLEVBQUUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFBO1FBQ3RDLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxRQUFRLENBQUE7UUFDaEMsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRSxhQUFjLENBQUMsQ0FBQTtRQUN2RCxNQUFNLE9BQU8sR0FBRyxNQUFNLFFBQVEsQ0FBQyxVQUFVLEVBQUUsQ0FBQTtRQUMzQyxNQUFNLFlBQVksR0FBRyxPQUFPLENBQUMsTUFBTSxRQUFRLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxDQUFBO1FBQ25FLE1BQU0sV0FBVyxHQUFHLGNBQWMsQ0FBQyxNQUFNO1lBQ3ZDLENBQUMsQ0FBQyxNQUFNLGtCQUFrQixDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7WUFDbkQsQ0FBQyxDQUFDLE1BQU0sMEJBQTBCLENBQUMsYUFBYSxDQUFDLENBQUE7UUFFbkQsSUFBSSxDQUFDLFdBQVcsSUFBSSxXQUFXLENBQUMsT0FBTyxJQUFJLFdBQVcsQ0FBQyxPQUFPLEtBQUssT0FBTyxFQUFFO1lBQzFFLE9BQU8sRUFBRSxDQUFBO1NBQ1Y7UUFFRCxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRTtZQUN4QixNQUFNLElBQUksR0FBRyxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUM7Z0JBQzlCLEdBQUcsT0FBTztnQkFDVixNQUFNLEVBQUUsS0FBSzthQUNkLENBQUMsQ0FBQTtZQUVGLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtnQkFDZixDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsR0FBRyxJQUFJLENBQUE7YUFDN0I7U0FDRjtRQUVELE9BQU87WUFDTDtnQkFDRSxHQUFHLFdBQVc7Z0JBQ2QsS0FBSyxFQUFFLElBQUksT0FBTyxFQUFFO2dCQUNwQixPQUFPO2dCQUNQLFlBQVk7YUFDYjtTQUNGLENBQUE7SUFDSCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILEtBQUssQ0FBQyxjQUFjLENBQUMsVUFBOEIsRUFBRTtRQUNuRCxNQUFNLEVBQ0osU0FBUyxFQUNULFFBQVEsRUFDVCxHQUFHLElBQUksQ0FBQTtRQUVSLElBQUksT0FBTyxDQUFDLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLElBQUksTUFBTSxRQUFRLENBQUMsU0FBUyxFQUFFLEVBQUU7WUFDaEUsT0FBTyxJQUFJLENBQUE7U0FDWjtRQUVELE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxRQUFRLENBQUE7UUFDaEMsTUFBTSxFQUNKLE9BQU8sRUFBRSxhQUFhLEVBQ3RCLFdBQVcsRUFDWCxFQUFFLEVBQ0YsVUFBVSxFQUNWLFlBQVksRUFBRSxrQkFBa0IsRUFDaEMsU0FBUyxFQUNULE1BQU0sR0FBRyxrQkFBa0IsQ0FBQyxNQUFNLEVBQ25DLEdBQUcsT0FBTyxDQUFBO1FBQ1gsSUFBSSxZQUFZLEdBQUcsa0JBQWtCLENBQUE7UUFFckMsSUFBSSxhQUFhLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUNoRCxPQUFPLGFBQWEsQ0FBQTtTQUNyQjtRQUVELElBQUksT0FBTyxZQUFZLEtBQUssV0FBVyxFQUFFO1lBQ3ZDLFlBQVksR0FBRyxDQUFDLE1BQU0sU0FBUyxDQUFDLFVBQVUsQ0FBQztnQkFDekMsSUFBSSxFQUFFLFdBQVc7YUFDbEIsQ0FBQyxDQUFBO1NBQ0g7UUFFRCxNQUFNLE9BQU8sR0FBRyxXQUFXLElBQUksTUFBTSxRQUFRLENBQUMsVUFBVSxFQUFFLENBQUE7UUFFMUQsSUFBSSxZQUFZLEVBQUU7WUFDaEIsT0FBTyxPQUFPLENBQUE7U0FDZjtRQUVELElBQUksV0FBVyxHQUF1QixJQUFJLENBQUE7UUFFMUMsSUFBSSxFQUFFLEVBQUU7WUFDTixXQUFXLEdBQUcsRUFBRSxDQUFBO1NBQ2pCO2FBQU07WUFDTCxNQUFNLElBQUksR0FBRyxNQUFNLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQztpQkFDckMsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDbEMsT0FBTyxDQUFDO2dCQUNQLElBQUksRUFBRSxXQUFXO2FBQ2xCLENBQUM7aUJBQ0QsR0FBRyxDQUFDO2dCQUNILE1BQU0sRUFBRSxTQUFTO2FBQ2xCLENBQUM7aUJBQ0QsSUFBSSxFQUFFLENBQUE7WUFFVCxJQUFJLGFBQWEsSUFBSSxJQUFJLEVBQUU7Z0JBQ3pCLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFBO2FBQy9CO1NBQ0Y7UUFFRCxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ2hCLE9BQU8sSUFBSSxDQUFBO1NBQ1o7UUFFRCxNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUM1QixPQUFPLEVBQ1AsY0FBYyxDQUFDLFdBQVcsRUFBRSxPQUFPLEVBQUUsVUFBVSxDQUFDLEVBQ2hELFVBQVUsQ0FDWCxDQUFBO1FBRUQsT0FBTyxXQUFXLENBQUE7SUFDcEIsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQThCLEVBQUU7UUFDekMsTUFBTSxXQUFXLEdBQUcsTUFBTSxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBRXRELElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDaEIsT0FBTyxLQUFLLENBQUE7U0FDYjtRQUVELE1BQU0sRUFDSixTQUFTLEVBQ1QsUUFBUSxFQUNULEdBQUcsSUFBSSxDQUFBO1FBQ1IsTUFBTSxFQUFFLGFBQWEsRUFBRSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUE7UUFDdEMsTUFBTSxFQUNKLFNBQVMsRUFDVCxNQUFNLEdBQUcsa0JBQWtCLENBQUMsTUFBTSxFQUNsQyxNQUFNLEVBQ04sTUFBTSxFQUNQLEdBQUcsT0FBTyxDQUFBO1FBQ1gsTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLFFBQVEsQ0FBQTtRQUNoQyxNQUFNLE9BQU8sR0FBRyxNQUFNLFFBQVEsQ0FBQyxVQUFVLEVBQUUsQ0FBQTtRQUMzQyxNQUFNLGFBQWEsR0FBRztZQUNwQixHQUFHLE1BQU0sUUFBUSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDO1lBQ25ELEtBQUssRUFBRSxFQUFFO1NBQ1YsQ0FBQTtRQUVELElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEdBQUcsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBRTlDLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsYUFBYyxDQUFDLENBQUE7UUFDdkQsTUFBTSxJQUFJLEdBQUcsTUFBTSxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUE7UUFFckMsSUFBSSxPQUFPLEtBQUssV0FBVyxFQUFFO1lBQzNCLE1BQU0sRUFBRSxPQUFPLENBQUMsR0FBRyxJQUFJLEtBQUssV0FBVyxFQUFFLENBQUMsQ0FBQTtTQUMzQzthQUFNO1lBQ0wsTUFBTSxFQUFFLE9BQU8sQ0FBQyxHQUFHLElBQUksS0FBSyxPQUFPLE9BQU8sV0FBVyxFQUFFLENBQUMsQ0FBQTtTQUN6RDtRQUVELE1BQU0sS0FBSyxHQUFHLElBQUkscUJBQXFCLENBQUMsU0FBUyxDQUFDO2FBQy9DLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDbEMsT0FBTyxDQUFDO1lBQ1AsSUFBSSxFQUFFLFdBQVc7U0FDbEIsQ0FBQzthQUNELElBQUksQ0FBQztZQUNKLE1BQU0sRUFBRSxTQUFTO1NBQ2xCLENBQUM7YUFDRCxjQUFjLEVBQUU7YUFDaEIsT0FBTyxDQUFDO1lBQ1AsT0FBTyxFQUFFLFdBQVc7U0FDckIsQ0FBQzthQUNELEtBQUssRUFBRSxDQUFBO1FBRVYsYUFBYSxDQUFDLEtBQUssR0FBRyxNQUFNO1lBQzFCLENBQUMsQ0FBQyxNQUFNLGtCQUFrQixDQUFDLEtBQUssQ0FBQztZQUNqQyxDQUFDLENBQUMsTUFBTSxlQUFlLENBQUMsYUFBYSxFQUFFLEtBQUssQ0FBQyxDQUFBO1FBRS9DLE1BQU0sRUFBRSxPQUFPLENBQUMscUJBQXFCLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFBO1FBRTNELElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFBO1FBQ3JDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFBO1FBRXZDLE9BQU8sSUFBSSxDQUFBO0lBQ2IsQ0FBQztDQU9GIn0=