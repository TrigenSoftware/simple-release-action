import semver from 'semver';
import { packagePrefix } from '@conventional-changelog/git-client';
import { bumpDefaultOptions, Project } from './project.js';
export * from './monorepo.types.js';
export class MonorepoProject extends Project {
    /**
     * The mode of the monorepo.
     * If mode is 'fixed', all projects will be bumped to the same version.
     * If mode is 'independent', each project will be bumped to its own version.
     */
    mode;
    projectsMutex;
    /**
     * Creates a new instance of the monorepo project.
     * @param options - The options to use for the monorepo project.
     */
    constructor(options) {
        const { mode, compose } = options;
        super({
            ...options,
            compose: compose
                ? (manifest, isRoot = true) => compose(manifest, isRoot)
                : manifest => manifest
        });
        this.mode = mode;
    }
    /**
     * Get the projects in the monorepo.
     * @yields The projects in the monorepo.
     */
    async *getProjects() {
        if (!this.projectsMutex) {
            const { compose, getProjects } = this.options;
            const options = {
                compose: (manifest) => compose(manifest, false),
                gitClient: this.gitClient,
                manifest: this.manifest
            };
            const projects = [];
            let resolve;
            this.projectsMutex = new Promise((r) => {
                resolve = r;
            });
            for await (const project of getProjects(options)) {
                const isPrivate = await project.manifest.isPrivate();
                if (!isPrivate) {
                    projects.push(project);
                    yield project;
                }
            }
            resolve(projects);
            return;
        }
        yield* await this.projectsMutex;
    }
    /**
     * Get scope from project name.
     * @param name - The name of the project.
     * @returns The scope of the project.
     */
    async getScope(name) {
        if (this.options.scope) {
            return await this.options.scope(name, await this.manifest.getName());
        }
        return name.replace(/@[^/]+\//, '');
    }
    /**
     * Get tag prefix from scope.
     * @param scope - The scope of the project.
     * @returns The tag prefix for the project.
     */
    async getTagPrefix(scope) {
        if (this.options.tagPrefix) {
            return await this.options.tagPrefix(scope);
        }
        if (this.mode === 'fixed') {
            return '';
        }
        return packagePrefix(scope);
    }
    getIndependentCommitMessage() {
        const { versionUpdates } = this;
        if (versionUpdates.length === 0) {
            throw new Error('Nothing to commit');
        }
        return `chore(release): monorepo release\n\n${versionUpdates
            .map(({ name, to }) => `- ${name}@${to}`)
            .join('\n')}`;
    }
    getCommitMessage() {
        const { mode } = this;
        if (mode === 'fixed') {
            return super.getCommitMessage();
        }
        return this.getIndependentCommitMessage();
    }
    async getIndependentTags() {
        const tags = [];
        for await (const project of this.getProjects()) {
            const { manifest } = project;
            const name = await manifest.getName();
            const scope = await this.getScope(name);
            const tagPrefix = await this.getTagPrefix(scope);
            tags.push(...await project.getTags({
                tagPrefix
            }));
        }
        return tags;
    }
    async getTags() {
        const { mode } = this;
        if (mode === 'fixed') {
            return super.getTags();
        }
        return this.getIndependentTags();
    }
    async getIndependentReleaseData() {
        const data = [];
        for await (const project of this.getProjects()) {
            const { manifest } = project;
            const name = await manifest.getName();
            const scope = await this.getScope(name);
            const tagPrefix = await this.getTagPrefix(scope);
            const releaseData = await project.getReleaseData({
                tagPrefix
            });
            data.push(...releaseData.map(data => ({
                ...data,
                title: `${name}: ${data.title}`
            })));
        }
        return data;
    }
    async getReleaseData() {
        const { mode } = this;
        if (mode === 'fixed') {
            return super.getReleaseData();
        }
        return this.getIndependentReleaseData();
    }
    async getBumpOptions(project, options, baseVersion) {
        const { preset = bumpDefaultOptions.preset, byProject, ...bumpOptions } = options;
        const { manifest } = project;
        const name = await manifest.getName();
        const scope = await this.getScope(name);
        const tagPrefix = await this.getTagPrefix(scope);
        const projectPreset = {
            ...typeof preset === 'string' ? {
                name: preset
            } : preset,
            scope
        };
        const projectBumpOptions = {
            ...bumpOptions,
            ...byProject?.[name],
            preset: projectPreset,
            tagPrefix,
            baseVersion
        };
        return projectBumpOptions;
    }
    getNextVersion(options = {}) {
        if (this.mode === 'fixed' && options.version) {
            return super.getNextVersion(options);
        }
        throw new Error('Monorepo project does not support getNextVersion');
    }
    async independentBump(options = {}) {
        let hasBump = false;
        for await (const project of this.getProjects()) {
            const projectBumpOptions = await this.getBumpOptions(project, options);
            hasBump = await project.bump(projectBumpOptions) || hasBump;
            this.changedFiles.push(...project.changedFiles);
            this.versionUpdates.push(...project.versionUpdates);
        }
        return hasBump;
    }
    async fixedBump(options = {}) {
        const { force } = options;
        const updatedProjects = [];
        const baseVersion = await this.manifest.getVersion();
        let hasBump = false;
        let fixedVersion;
        for await (const project of this.getProjects()) {
            const projectBumpOptions = await this.getBumpOptions(project, options, baseVersion);
            const version = await project.getNextVersion(projectBumpOptions);
            if (version || force) {
                updatedProjects.push({
                    project,
                    options: projectBumpOptions
                });
                if (version && (!fixedVersion || semver.gt(version, fixedVersion))) {
                    fixedVersion = version;
                }
            }
        }
        if (fixedVersion) {
            hasBump = await super.bump({
                ...options,
                force: true,
                version: fixedVersion,
                tagPrefix: await this.getTagPrefix('')
            });
            for (const { project, options } of updatedProjects) {
                hasBump = await project.bump({
                    ...options,
                    version: fixedVersion
                }) || hasBump;
                this.changedFiles.push(...project.changedFiles);
                this.versionUpdates.push(...project.versionUpdates);
            }
        }
        return hasBump;
    }
    async bump(options = {}) {
        const { mode } = this;
        if (mode === 'fixed') {
            return this.fixedBump(options);
        }
        return this.independentBump(options);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9ub3JlcG8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcHJvamVjdC9tb25vcmVwby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLE1BQU0sTUFBTSxRQUFRLENBQUE7QUFDM0IsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG9DQUFvQyxDQUFBO0FBR2xFLE9BQU8sRUFFTCxrQkFBa0IsRUFDbEIsT0FBTyxFQUNSLE1BQU0sY0FBYyxDQUFBO0FBT3JCLGNBQWMscUJBQXFCLENBQUE7QUFFbkMsTUFBTSxPQUFnQixlQUFnQixTQUFRLE9BQU87SUFDbkQ7Ozs7T0FJRztJQUNILElBQUksQ0FBYztJQUVWLGFBQWEsQ0FBZ0M7SUFFckQ7OztPQUdHO0lBQ0gsWUFBWSxPQUErQjtRQUN6QyxNQUFNLEVBQ0osSUFBSSxFQUNKLE9BQU8sRUFDUixHQUFHLE9BQU8sQ0FBQTtRQUVYLEtBQUssQ0FBQztZQUNKLEdBQUcsT0FBTztZQUNWLE9BQU8sRUFBRSxPQUFPO2dCQUNkLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxNQUFNLEdBQUcsSUFBSSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQztnQkFDeEQsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsUUFBUTtTQUN6QixDQUFDLENBQUE7UUFFRixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQTtJQUNsQixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsS0FBSyxDQUFBLENBQUUsV0FBVztRQUNoQixJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUN2QixNQUFNLEVBQ0osT0FBTyxFQUNQLFdBQVcsRUFDWixHQUFHLElBQUksQ0FBQyxPQUFPLENBQUE7WUFDaEIsTUFBTSxPQUFPLEdBQUc7Z0JBQ2QsT0FBTyxFQUFFLENBQUMsUUFBeUIsRUFBRSxFQUFFLENBQUMsT0FBUSxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUM7Z0JB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