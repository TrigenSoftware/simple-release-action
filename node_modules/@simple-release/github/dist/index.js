import { Octokit } from '@octokit/rest';
import { GitRepositoryHosting } from '@simple-release/core';
import { CHEATSHEET } from './cheatsheet.js';
export { Octokit };
const OK = 200;
const noop = () => { };
/**
 * A class that creates releases on GitHub using the GitHub REST API.
 */
export class GithubHosting extends GitRepositoryHosting {
    options;
    octokit;
    /**
     * Creates a new instance of the GitHub release creator.
     * @param options - The options for the GitHub release creator.
     */
    constructor(options) {
        super();
        this.options = options;
        this.octokit = options.octokit || new Octokit({
            auth: options.token
        });
        this.octokit.log = {
            debug: noop,
            info: noop,
            warn: noop,
            error: noop
        };
    }
    async getRepositoryId(project) {
        let { owner, project: repo } = this.options;
        if (!owner || !repo) {
            const info = await project.getHostedGitInfo();
            if (info) {
                if (!owner) {
                    owner = info.owner;
                }
                if (!repo) {
                    repo = info.project;
                }
            }
        }
        return {
            owner: owner,
            repo: repo
        };
    }
    async hasRelease(owner, repo, tag) {
        try {
            const { status } = await this.octokit.rest.repos.getReleaseByTag({
                owner,
                repo,
                tag
            });
            return status === OK;
        }
        catch {
            return false;
        }
    }
    async createRelease(options) {
        const { project, dryRun, logger } = options;
        const { octokit } = this;
        const data = await project.getReleaseData();
        if (!data.length) {
            logger?.info('No release data found. Skipping release creation.');
            return;
        }
        const repositoryId = await this.getRepositoryId(project);
        for (const releaseData of data) {
            if (await this.hasRelease(repositoryId.owner, repositoryId.repo, releaseData.nextTag)) {
                logger?.verbose(`Release ${releaseData.nextTag} already exists.`);
                continue;
            }
            const params = {
                ...repositoryId,
                tag_name: releaseData.nextTag,
                name: releaseData.title,
                body: releaseData.notes,
                prerelease: releaseData.isPrerelease
            };
            logger?.verbose('Creating release with params:');
            logger?.verbose(params);
            if (!dryRun) {
                await octokit.rest.repos.createRelease(params);
            }
        }
    }
    getPullRequestData(project, from, to) {
        const [title] = project.getCommitMessage().split('\n');
        const body = `${project.versionUpdates.map(({ name, notes }) => `# ${name}\n\n${notes.trim()}`).join('\n\n')}

---
This PR was generated with [simple-release](https://github.com/TrigenSoftware/simple-release).

<details>
<summary>ðŸ“„ Cheatsheet</summary>
<br>

${CHEATSHEET}

</details>

<!--
  Please do not edit this comment.
  simple-release-pull-request: true
  simple-release-branch-from: ${from}
  simple-release-branch-to: ${to}
-->
`;
        return {
            title,
            body
        };
    }
    async createPullRequest(options) {
        const { project, dryRun, logger, draft } = options;
        let { from, to } = options;
        const { gitClient } = project;
        if (!from) {
            from = await gitClient.getCurrentBranch();
        }
        if (!to) {
            to = await gitClient.getDefaultBranch();
        }
        if (from === to) {
            throw new Error('Cannot create a pull request from the same branch.');
        }
        const { octokit } = this;
        const repositoryId = await this.getRepositoryId(project);
        const { data: [pr] } = await octokit.rest.pulls.list({
            ...repositoryId,
            head: `${repositoryId.owner}:${from}`,
            state: 'open'
        });
        if (pr) {
            logger?.info(`Updating existing pull request #${pr.number}`);
        }
        const { title, body } = this.getPullRequestData(project, from, to);
        logger?.verbose('Pull request data:');
        if (!pr && draft) {
            logger?.verbose('Draft: true');
        }
        logger?.verbose(`${from} -> ${to}`);
        logger?.verbose(`Title: ${title}`);
        logger?.verbose(`Body:\n\n${body}`);
        if (!dryRun) {
            if (pr) {
                await octokit.rest.pulls.update({
                    ...repositoryId,
                    pull_number: pr.number,
                    title,
                    body
                });
            }
            else {
                await octokit.rest.pulls.create({
                    ...repositoryId,
                    title,
                    base: to,
                    head: from,
                    body,
                    draft
                });
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGVBQWUsQ0FBQTtBQUN2QyxPQUFPLEVBSUwsb0JBQW9CLEVBQ3JCLE1BQU0sc0JBQXNCLENBQUE7QUFDN0IsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGlCQUFpQixDQUFBO0FBRTVDLE9BQU8sRUFBRSxPQUFPLEVBQUUsQ0FBQTtBQThCbEIsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFBO0FBQ2QsTUFBTSxJQUFJLEdBQUcsR0FBRyxFQUFFLEdBQWUsQ0FBQyxDQUFBO0FBRWxDOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGFBQWMsU0FBUSxvQkFBb0I7SUFRbEM7SUFQVixPQUFPLENBQVM7SUFFekI7OztPQUdHO0lBQ0gsWUFDbUIsT0FBc0I7UUFFdkMsS0FBSyxFQUFFLENBQUE7UUFGVSxZQUFPLEdBQVAsT0FBTyxDQUFlO1FBSXZDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sSUFBSSxJQUFJLE9BQU8sQ0FBQztZQUM1QyxJQUFJLEVBQUUsT0FBTyxDQUFDLEtBQUs7U0FDcEIsQ0FBQyxDQUFBO1FBQ0YsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEdBQUc7WUFDakIsS0FBSyxFQUFFLElBQUk7WUFDWCxJQUFJLEVBQUUsSUFBSTtZQUNWLElBQUksRUFBRSxJQUFJO1lBQ1YsS0FBSyxFQUFFLElBQUk7U0FDWixDQUFBO0lBQ0gsQ0FBQztJQUVELEtBQUssQ0FBQyxlQUFlLENBQUMsT0FBZ0I7UUFDcEMsSUFBSSxFQUNGLEtBQUssRUFDTCxPQUFPLEVBQUUsSUFBSSxFQUNkLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQTtRQUVoQixJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDcEIsTUFBTSxJQUFJLEdBQUcsTUFBTSxPQUFP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