import {} from 'child_process';
import { concatBufferStream } from '@simple-libs/stream-utils';
/**
 * Wait for a child process to exit and return its exit code.
 * @param process
 * @returns A promise that resolves to the exit code of the process.
 */
export async function exitCode(process) {
    if (process.exitCode !== null) {
        return process.exitCode;
    }
    return new Promise(resolve => process.once('close', resolve));
}
/**
 * Catch error from a child process.
 * Also captures stderr output.
 * @param process
 * @returns A promise that resolves to an Error if the process exited with a non-zero code, or null if it exited successfully.
 */
export async function catchProcessError(process) {
    let error = new Error('Process exited with non-zero code');
    let stderr = '';
    process.on('error', (err) => {
        error = err;
    });
    if (process.stderr) {
        let chunk;
        for await (chunk of process.stderr) {
            stderr += chunk.toString();
        }
    }
    const code = await exitCode(process);
    if (stderr) {
        error = new Error(stderr);
    }
    return code ? error : null;
}
/**
 * Throws an error if the child process exits with a non-zero code.
 * @param process
 */
export async function throwProcessError(process) {
    const error = await catchProcessError(process);
    if (error) {
        throw error;
    }
}
/**
 * Yields the stdout of a child process.
 * It will throw an error if the process exits with a non-zero code.
 * @param process
 * @yields The stdout of the process.
 */
export async function* outputStream(process) {
    const error = throwProcessError(process);
    if (process.stdout) {
        yield* process.stdout;
    }
    await error;
}
/**
 * Collects the stdout of a child process into a single Buffer.
 * It will throw an error if the process exits with a non-zero code.
 * @param process
 * @returns A promise that resolves to a Buffer containing the stdout of the process.
 */
export function output(process) {
    return concatBufferStream(outputStream(process));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFxQixNQUFNLGVBQWUsQ0FBQTtBQUNqRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQTtBQUU5RDs7OztHQUlHO0FBQ0gsTUFBTSxDQUFDLEtBQUssVUFBVSxRQUFRLENBQUMsT0FBcUI7SUFDbEQsSUFBSSxPQUFPLENBQUMsUUFBUSxLQUFLLElBQUksRUFBRTtRQUM3QixPQUFPLE9BQU8sQ0FBQyxRQUFRLENBQUE7S0FDeEI7SUFFRCxPQUFPLElBQUksT0FBTyxDQUFTLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQTtBQUN2RSxDQUFDO0FBRUQ7Ozs7O0dBS0c7QUFDSCxNQUFNLENBQUMsS0FBSyxVQUFVLGlCQUFpQixDQUFDLE9BQXFCO0lBQzNELElBQUksS0FBSyxHQUFHLElBQUksS0FBSyxDQUFDLG1DQUFtQyxDQUFDLENBQUE7SUFDMUQsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFBO0lBRWYsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFVLEVBQUUsRUFBRTtRQUNqQyxLQUFLLEdBQUcsR0FBRyxDQUFBO0lBQ2IsQ0FBQyxDQUFDLENBQUE7SUFFRixJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUU7UUFDbEIsSUFBSSxLQUFhLENBQUE7UUFFakIsSUFBSSxLQUFLLEVBQUUsS0FBSyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUU7WUFDbEMsTUFBTSxJQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQTtTQUMzQjtLQUNGO0lBRUQsTUFBTSxJQUFJLEdBQUcsTUFBTSxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUE7SUFFcEMsSUFBSSxNQUFNLEVBQUU7UUFDVixLQUFLLEdBQUcsSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUE7S0FDMUI7SUFFRCxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUE7QUFDNUIsQ0FBQztBQUVEOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxLQUFLLFVBQVUsaUJBQWlCLENBQUMsT0FBcUI7SUFDM0QsTUFBTSxLQUFLLEdBQUcsTUFBTSxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUU5QyxJQUFJLEtBQUssRUFBRTtRQUNULE1BQU0sS0FBSyxDQUFBO0tBQ1o7QUFDSCxDQUFDO0FBRUQ7Ozs7O0dBS0c7QUFDSCxNQUFNLENBQUMsS0FBSyxTQUFTLENBQUMsQ0FBQyxZQUFZLENBQUMsT0FBcUI7SUFDdkQsTUFBTSxLQUFLLEdBQUcsaUJBQWlCLENBQUMsT0FBTyxDQUFDLENBQUE7SUFFeEMsSUFBSSxPQUFPLENBQUMsTUFBTSxFQUFFO1FBQ2xCLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUErQixDQUFBO0tBQy9DO0lBRUQsTUFBTSxLQUFLLENBQUE7QUFDYixDQUFDO0FBRUQ7Ozs7O0dBS0c7QUFDSCxNQUFNLFVBQVUsTUFBTSxDQUFDLE9BQXFCO0lBQzFDLE9BQU8sa0JBQWtCLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUE7QUFDbEQsQ0FBQyJ9