import type { getOctokit } from '@actions/github';
import { type Project, type ReleaserOptions, Releaser } from '@simple-release/core';
import { GithubHosting } from '@simple-release/github';
export interface ReleaserGithubActionOptions<P extends Project = Project> extends Omit<ReleaserOptions<P, GithubHosting>, 'hosting'> {
    /**
     * The Octokit instance to use for making GitHub API calls.
     */
    octokit: ReturnType<typeof getOctokit>;
}
export declare class ReleaserGithubAction<P extends Project = Project> extends Releaser<P, GithubHosting> {
    hosting: GithubHosting;
    constructor(options: ReleaserGithubActionOptions<P>);
    checkout(branch?: string): this;
    /**
     * Fetches options from the pull request comments.
     * @returns Project releaser instance for chaining.
     */
    fetchOptions(): this;
    tag(): this;
    push(): this;
    /**
     * Run all steps to create a pull request.
     */
    runPullRequestAction(): Promise<void>;
    /**
     * Run all steps to release a new version.
     * @param check - Whether to check if the commit is a release commit.
     */
    runReleaseAction(check?: boolean): Promise<void>;
    /**
     * Run action based on the context.
     */
    runAction(): Promise<void>;
}
//# sourceMappingURL=releaser.d.ts.map