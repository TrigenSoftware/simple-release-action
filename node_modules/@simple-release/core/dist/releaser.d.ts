import type { ConventionalGitClient } from '@conventional-changelog/git-client';
import type { Project } from './project/index.js';
import type { GitRepositoryHosting } from './hosting/index.js';
import { Logger } from './logger.js';
import type { PickOverridableOptions, ReleaserCheckoutOptions, ReleaserOptions, ReleaserCommitOptions, ReleaserTagOptions, ReleaserPushOptions, ReleaserStepsOptions } from './releaser.types.js';
export * from './releaser.types.js';
/**
 * A releaser class that provides methods to manage the release process of a project.
 */
export declare class Releaser<P extends Project = Project, G extends GitRepositoryHosting = GitRepositoryHosting> {
    options: ReleaserOptions<P, G>;
    /**
     * Target project to release.
     */
    readonly project: P;
    /**
     * Git repository hosting service to use for creating releases and pull requests.
     */
    readonly hosting?: G;
    /**
     * The git client used to interact with the repository.
     */
    readonly gitClient: ConventionalGitClient;
    /**
     * The logger used to log messages during the release process.
     */
    readonly logger: Logger;
    protected readonly state: {
        headBranch?: string;
        baseBranch?: string;
        bump?: boolean;
        tags?: boolean;
    };
    protected readonly stepsOptions: ReleaserStepsOptions<P, G>;
    private readonly queue;
    /**
     * Creates a project releaser.
     * @param options
     */
    constructor(options: ReleaserOptions<P, G>);
    enqueue(fn: () => Promise<void>): this;
    private getBaseBranch;
    /**
     * Set default options for the releaser steps.
     * @param options
     * @returns Project releaser instance for chaining.
     */
    setOptions(options: ReleaserStepsOptions<P, G>): this;
    /**
     * Enqueue a task to checkout a branch.
     * @param branch - The branch to checkout, defaults to `'simple-release'`.
     * @param options
     * @returns Project releaser instance for chaining.
     */
    checkout(branch?: string, options?: ReleaserCheckoutOptions): this;
    /**
     * Enqueue a task to bump the version of the project.
     * @param options
     * @returns Project releaser instance for chaining.
     */
    bump(options?: PickOverridableOptions<P['bump']>): this;
    /**
     * Enqueue a task to commit bump changes to the repository.
     * @param options
     * @returns Project releaser instance for chaining.
     */
    commit(options?: ReleaserCommitOptions): this;
    /**
     * Enqueue a task to tag the project with the new version.
     * @param options
     * @returns Project releaser instance for chaining.
     */
    tag(options?: ReleaserTagOptions): this;
    /**
     * Enqueue a task to push changes to the remote repository.
     * @param options
     * @returns Project releaser instance for chaining.
     */
    push(options?: ReleaserPushOptions): this;
    /**
     * Enqueue a task to publish the project.
     * @param options
     * @returns Project releaser instance for chaining.
     */
    publish(options?: PickOverridableOptions<P['publish']>): this;
    /**
     * Enqueue a task to create a release.
     * @param option
     * @returns Project releaser instance for chaining.
     */
    release(option?: PickOverridableOptions<G['createRelease']>): this;
    /**
     * Enqueue a task to create a pull request.
     * @param option
     * @returns Project releaser instance for chaining.
     */
    pullRequest(option?: PickOverridableOptions<G['createPullRequest']>): this;
    /**
     * Run all queued tasks in order.
     * @param condition - Optional condition to run the releaser.
     */
    run(condition?: (releaser: this) => Promise<boolean>): Promise<void>;
}
//# sourceMappingURL=releaser.d.ts.map