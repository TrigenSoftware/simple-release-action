import { context } from '@actions/github';
import { SET_OPTION_COMMAND } from './comment.js';
export async function ifReleaseCommit(releaser) {
    const { gitClient, project } = releaser;
    const message = await gitClient.exec('log', '-1', '--pretty=%B');
    const tags = await project.getTags();
    return tags.length > 0 && message.startsWith('chore(release):');
}
export function ifSetOptionsComment() {
    const { eventName, payload: { issue, comment } } = context;
    const isPullRequest = issue?.pull_request;
    const issueAuthor = issue?.user?.login;
    const issueBody = issue?.body;
    const issueState = issue?.state;
    const commentBody = comment?.body;
    if (eventName === 'issue_comment') {
        if (isPullRequest
            && issueAuthor === 'github-actions[bot]'
            && issueState === 'open'
            && issueBody?.includes('simple-release-pull-request: true')
            && commentBody?.includes(SET_OPTION_COMMAND)) {
            const matches = issueBody.match(/simple-release-branch-to:\s*([^\s]+)/);
            if (matches) {
                return matches[1];
            }
        }
        return false; // not a pull request comment, stop action
    }
    return null; // continue
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZGl0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9jb25kaXRpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQTtBQUV6QyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxjQUFjLENBQUE7QUFFakQsTUFBTSxDQUFDLEtBQUssVUFBVSxlQUFlLENBQUMsUUFBOEI7SUFDbEUsTUFBTSxFQUNKLFNBQVMsRUFDVCxPQUFPLEVBQ1IsR0FBRyxRQUFRLENBQUE7SUFDWixNQUFNLE9BQU8sR0FBRyxNQUFNLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxhQUFhLENBQUMsQ0FBQTtJQUNoRSxNQUFNLElBQUksR0FBRyxNQUFNLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUVwQyxPQUFPLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtBQUNqRSxDQUFDO0FBRUQsTUFBTSxVQUFVLG1CQUFtQjtJQUNqQyxNQUFNLEVBQ0osU0FBUyxFQUNULE9BQU8sRUFBRSxFQUNQLEtBQUssRUFDTCxPQUFPLEVBQ1IsRUFDRixHQUFHLE9BQU8sQ0FBQTtJQUNYLE1BQU0sYUFBYSxHQUFHLEtBQUssRUFBRSxZQUF1QixDQUFBO0lBQ3BELE1BQU0sV0FBVyxHQUFJLEtBQUssRUFBRSxJQUFzQyxFQUFFLEtBQUssQ0FBQTtJQUN6RSxNQUFNLFNBQVMsR0FBRyxLQUFLLEVBQUUsSUFBSSxDQUFBO0lBQzdCLE1BQU0sVUFBVSxHQUFHLEtBQUssRUFBRSxLQUFlLENBQUE7SUFDekMsTUFBTSxXQUFXLEdBQUksT0FBeUMsRUFBRSxJQUFJLENBQUE7SUFFcEUsSUFBSSxTQUFTLEtBQUssZUFBZSxFQUFFO1FBQ2pDLElBQUksYUFBYTtlQUNaLFdBQVcsS0FBSyxxQkFBcUI7ZUFDckMsVUFBVSxLQUFLLE1BQU07ZUFDckIsU0FBUyxFQUFFLFFBQVEsQ0FBQyxtQ0FBbUMsQ0FBQztlQUN4RCxXQUFXLEVBQUUsUUFBUSxDQUFDLGtCQUFrQixDQUFDLEVBQzVDO1lBQ0EsTUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFBO1lBRXZFLElBQUksT0FBTyxFQUFFO2dCQUNYLE9BQU8sT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFBO2FBQ2xCO1NBQ0Y7UUFFRCxPQUFPLEtBQUssQ0FBQSxDQUFDLDBDQUEwQztLQUN4RDtJQUVELE9BQU8sSUFBSSxDQUFBLENBQUMsV0FBVztBQUN6QixDQUFDIn0=