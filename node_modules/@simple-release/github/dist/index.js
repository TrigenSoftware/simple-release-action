import { Octokit } from '@octokit/rest';
import { GitRepositoryHosting } from '@simple-release/core';
export { Octokit };
const OK = 200;
const noop = () => { };
/**
 * A class that creates releases on GitHub using the GitHub REST API.
 */
export class GithubHosting extends GitRepositoryHosting {
    options;
    octokit;
    /**
     * Creates a new instance of the GitHub release creator.
     * @param options - The options for the GitHub release creator.
     */
    constructor(options) {
        super();
        this.options = options;
        this.octokit = options.octokit || new Octokit({
            auth: options.token
        });
        this.octokit.log = {
            debug: noop,
            info: noop,
            warn: noop,
            error: noop
        };
    }
    async getRepositoryId(project) {
        let { owner, project: repo } = this.options;
        if (!owner || !repo) {
            const info = await project.getHostedGitInfo();
            if (info) {
                if (!owner) {
                    owner = info.owner;
                }
                if (!repo) {
                    repo = info.project;
                }
            }
        }
        return {
            owner: owner,
            repo: repo
        };
    }
    async hasRelease(owner, repo, tag) {
        try {
            const { status } = await this.octokit.rest.repos.getReleaseByTag({
                owner,
                repo,
                tag
            });
            return status === OK;
        }
        catch {
            return false;
        }
    }
    async createRelease(options) {
        const { project, dryRun, logger } = options;
        const { octokit } = this;
        const data = await project.getReleaseData();
        const repositoryId = await this.getRepositoryId(project);
        for (const releaseData of data) {
            if (await this.hasRelease(repositoryId.owner, repositoryId.repo, releaseData.nextTag)) {
                logger?.verbose(`Release ${releaseData.nextTag} already exists.`);
                continue;
            }
            const params = {
                ...repositoryId,
                tag_name: releaseData.nextTag,
                name: releaseData.title,
                body: releaseData.notes,
                prerelease: releaseData.isPrerelease
            };
            logger?.verbose('Creating release with params:');
            logger?.verbose(params);
            if (!dryRun) {
                await octokit.rest.repos.createRelease(params);
            }
        }
    }
    getPullRequestData(project, from, to) {
        const [title] = project.getCommitMessage().split('\n');
        const body = `${project.versionUpdates.map(({ name, notes }) => `# ${name}\n\n${notes.trim()}`).join('\n\n')}

---
This PR was generated with [simple-release](https://github.com/TrigenSoftware/simple-release).

<!--
  Please do not edit this comment.
  simple-release-pull-request: true
  simple-release-branch-from: ${from}
  simple-release-branch-to: ${to}
-->
`;
        return {
            title,
            body
        };
    }
    async createPullRequest(options) {
        const { project, dryRun, logger, draft } = options;
        let { from, to } = options;
        const { gitClient } = project;
        if (!from) {
            from = await gitClient.getCurrentBranch();
        }
        if (!to) {
            to = await gitClient.getDefaultBranch();
        }
        if (from === to) {
            throw new Error('Cannot create a pull request from the same branch.');
        }
        const { octokit } = this;
        const repositoryId = await this.getRepositoryId(project);
        const { data: [pr] } = await octokit.rest.pulls.list({
            ...repositoryId,
            head: `${repositoryId.owner}:${from}`,
            state: 'open'
        });
        if (pr) {
            logger?.info(`Updating existing pull request #${pr.number}`);
        }
        const { title, body } = this.getPullRequestData(project, from, to);
        logger?.verbose('Pull request data:');
        if (!pr && draft) {
            logger?.verbose('Draft: true');
        }
        logger?.verbose(`${from} -> ${to}`);
        logger?.verbose(`Title: ${title}`);
        logger?.verbose(`Body:\n\n${body}`);
        if (!dryRun) {
            if (pr) {
                await octokit.rest.pulls.update({
                    ...repositoryId,
                    pull_number: pr.number,
                    title,
                    body
                });
            }
            else {
                await octokit.rest.pulls.create({
                    ...repositoryId,
                    title,
                    base: to,
                    head: from,
                    body,
                    draft
                });
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGVBQWUsQ0FBQTtBQUN2QyxPQUFPLEVBSUwsb0JBQW9CLEVBQ3JCLE1BQU0sc0JBQXNCLENBQUE7QUFFN0IsT0FBTyxFQUFFLE9BQU8sRUFBRSxDQUFBO0FBOEJsQixNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUE7QUFDZCxNQUFNLElBQUksR0FBRyxHQUFHLEVBQUUsR0FBZSxDQUFDLENBQUE7QUFFbEM7O0dBRUc7QUFDSCxNQUFNLE9BQU8sYUFBYyxTQUFRLG9CQUFvQjtJQVFsQztJQVBWLE9BQU8sQ0FBUztJQUV6Qjs7O09BR0c7SUFDSCxZQUNtQixPQUFzQjtRQUV2QyxLQUFLLEVBQUUsQ0FBQTtRQUZVLFlBQU8sR0FBUCxPQUFPLENBQWU7UUFJdkMsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxJQUFJLElBQUksT0FBTyxDQUFDO1lBQzVDLElBQUksRUFBRSxPQUFPLENBQUMsS0FBSztTQUNwQixDQUFDLENBQUE7UUFDRixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsR0FBRztZQUNqQixLQUFLLEVBQUUsSUFBSTtZQUNYLElBQUksRUFBRSxJQUFJO1lBQ1YsSUFBSSxFQUFFLElBQUk7WUFDVixLQUFLLEVBQUUsSUFBSTtTQUNaLENBQUE7SUFDSCxDQUFDO0lBRUQsS0FBSyxDQUFDLGVBQWUsQ0FBQyxPQUFnQjtRQUNwQyxJQUFJLEVBQ0YsS0FBSyxFQUNMLE9BQU8sRUFBRSxJQUFJLEVBQ2QsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFBO1FBRWhCLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDbkIsTUFBTSxJQUFJLEdBQUcsTUFBTSxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQTtZQUU3QyxJQUFJLElBQUksRUFBRTtnQkFD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