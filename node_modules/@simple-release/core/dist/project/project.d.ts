import { ConventionalGitClient } from '@conventional-changelog/git-client';
import type { ProjectManifest } from '../manifest/index.js';
import type { ReleaseData } from '../hosting/index.js';
import type { ProjectOptions, ProjectBumpOptions, ProjectVersionUpdate, ProjectTagsOptions, ProjectReleaseOptions, ProjectPublishOptions } from './project.types.js';
export * from './project.types.js';
export declare const bumpDefaultOptions: {
    preset: {
        name: string;
        bumpStrict: boolean;
    };
};
/**
 * A base class that represents a project.
 */
export declare abstract class Project {
    /**
     * The manifest of the project.
     */
    manifest: ProjectManifest;
    /**
     * The git client used to interact with the repository.
     */
    gitClient: ConventionalGitClient;
    options: ProjectOptions;
    /**
     * Changed files after interacting with the project.
     */
    changedFiles: string[];
    /**
     * Version updates after interacting with the project.
     */
    versionUpdates: ProjectVersionUpdate[];
    /**
     * Creates a new instance of the project.
     * @param options - The options to use for the project.
     */
    constructor(options: ProjectOptions);
    /**
     * Get the hosted git information for the project.
     * @returns The hosted git information.
     */
    getHostedGitInfo(): Promise<import("@simple-libs/hosted-git-info").HostedGitInfo | null>;
    /**
     * Get the commit message for the version updates.
     * @returns The commit message.
     */
    getCommitMessage(): string;
    /**
     * Get new git tags for the version updates.
     * @param options - The options to use for getting the tags.
     * @returns The new git tags.
     */
    getTags(options?: ProjectTagsOptions): Promise<string[]>;
    /**
     * Get the release data for the project.
     * @param options - The options to use for getting the release data.
     * @returns The release data.
     */
    getReleaseData(options?: ProjectReleaseOptions): Promise<ReleaseData[]>;
    /**
     * Get the next version for the project.
     * @param options - The options to use for getting the next version.
     * @returns The next version.
     */
    getNextVersion(options?: ProjectBumpOptions): Promise<string | null>;
    /**
     * Bump the version of the project.
     * @param options - The options to use for bumping the version.
     * @returns Whether the version was bumped.
     */
    bump(options?: ProjectBumpOptions): Promise<boolean>;
    /**
     * Publish the project.
     * @param options
     */
    abstract publish(options?: ProjectPublishOptions): Promise<void>;
}
//# sourceMappingURL=project.d.ts.map