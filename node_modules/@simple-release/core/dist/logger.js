/* eslint-disable max-classes-per-file */
function defaultPrinter({ dryRun, stage, message }) {
    // eslint-disable-next-line no-console
    console.log(`${dryRun ? `[dry-run]` : ''}[${stage}]:`, message);
}
/**
 * A child messages logger that bounds to a specific stage.
 */
export class ChildLogger {
    parent;
    stage;
    /**
     * Creates a child logger instance.
     * @param parent - The parent logger to inherit options from.
     * @param stage - The stage of the process this logger is associated with.
     */
    constructor(parent, stage) {
        this.parent = parent;
        this.stage = stage;
    }
    /**
     * Logs an info message.
     * @param message - The message to log.
     */
    info(message) {
        this.parent.info(this.stage, message);
    }
    /**
     * Logs a verbose message.
     * @param message - The message to log.
     */
    verbose(message) {
        this.parent.verbose(this.stage, message);
    }
}
/**
 * A messages logger.
 */
export class Logger {
    options;
    printer;
    /**
     * Creates a logger instance.
     * @param options - The logger options.
     */
    constructor(options = {}) {
        this.options = options;
        const { printer = defaultPrinter } = options;
        this.printer = printer;
    }
    /**
     * Logs an info message.
     * @param stage - The stage of the process.
     * @param message - The message to log.
     */
    info(stage, message) {
        const { silent, dryRun } = this.options;
        if (!silent) {
            this.printer({
                dryRun,
                stage,
                message
            });
        }
    }
    /**
     * Logs a verbose message.
     * @param stage - The stage of the process.
     * @param message - The message to log.
     */
    verbose(stage, message) {
        const { silent, verbose, dryRun } = this.options;
        if (!silent && (verbose || dryRun)) {
            this.printer({
                dryRun,
                stage,
                message
            });
        }
    }
    /**
     * Creates a child logger for a specific stage.
     * @param stage - The stage of the process.
     * @returns A child logger for the specified stage.
     */
    createChild(stage) {
        return new ChildLogger(this, stage);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2xvZ2dlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx5Q0FBeUM7QUFpQnpDLFNBQVMsY0FBYyxDQUFDLEVBQ3RCLE1BQU0sRUFDTixLQUFLLEVBQ0wsT0FBTyxFQUNPO0lBQ2Qsc0NBQXNDO0lBQ3RDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLEtBQUssSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFBO0FBQ2pFLENBQUM7QUFFRDs7R0FFRztBQUNILE1BQU0sT0FBTyxXQUFXO0lBT2I7SUFDQTtJQVBUOzs7O09BSUc7SUFDSCxZQUNTLE1BQWMsRUFDZCxLQUFhO1FBRGIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUNkLFVBQUssR0FBTCxLQUFLLENBQVE7SUFDbkIsQ0FBQztJQUVKOzs7T0FHRztJQUNILElBQUksQ0FBQyxPQUFnQjtRQUNuQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFBO0lBQ3ZDLENBQUM7SUFFRDs7O09BR0c7SUFDSCxPQUFPLENBQUMsT0FBZ0I7UUFDdEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQTtJQUMxQyxDQUFDO0NBQ0Y7QUFFRDs7R0FFRztBQUNILE1BQU0sT0FBTyxNQUFNO0lBUVI7SUFQTyxPQUFPLENBQVM7SUFFaEM7OztPQUdHO0lBQ0gsWUFDUyxVQUF5QixFQUFFO1FBQTNCLFlBQU8sR0FBUCxPQUFPLENBQW9CO1FBRWxDLE1BQU0sRUFBRSxPQUFPLEdBQUcsY0FBYyxFQUFFLEdBQUcsT0FBTyxDQUFBO1FBRTVDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFBO0lBQ3hCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsSUFBSSxDQUFDLEtBQWEsRUFBRSxPQUFnQjtRQUNsQyxNQUFNLEVBQ0osTUFBTSxFQUNOLE1BQU0sRUFDUCxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUE7UUFFaEIsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ1osSUFBSSxDQUFDLE9BQU8sQ0FBQztnQkFDWCxNQUFNO2dCQUNOLEtBQUs7Z0JBQ0wsT0FBTzthQUNSLENBQUMsQ0FBQTtRQUNKLENBQUM7SUFDSCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILE9BQU8sQ0FBQyxLQUFhLEVBQUUsT0FBZ0I7UUFDckMsTUFBTSxFQUNKLE1BQU0sRUFDTixPQUFPLEVBQ1AsTUFBTSxFQUNQLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQTtRQUVoQixJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsT0FBTyxJQUFJLE1BQU0sQ0FBQyxFQUFFLENBQUM7WUFDbkMsSUFBSSxDQUFDLE9BQU8sQ0FBQztnQkFDWCxNQUFNO2dCQUNOLEtBQUs7Z0JBQ0wsT0FBTzthQUNSLENBQUMsQ0FBQTtRQUNKLENBQUM7SUFDSCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILFdBQVcsQ0FBQyxLQUFhO1FBQ3ZCLE9BQU8sSUFBSSxXQUFXLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFBO0lBQ3JDLENBQUM7Q0FDRiJ9