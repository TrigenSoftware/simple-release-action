import { Releaser } from '@simple-release/core';
import { GithubHosting } from '@simple-release/github';
import { parseSetOptionsComment } from './comment.js';
import { ifReleaseCommit, ifSetOptionsComment } from './conditions.js';
export class ReleaserGithubAction extends Releaser {
    constructor(options) {
        super({
            hosting: new GithubHosting({
                octokit: options.octokit
            }),
            ...options
        });
    }
    checkout(branch) {
        return super.checkout(branch, {
            username: 'github-actions[bot]',
            email: 'github-actions[bot]@users.noreply.github.com',
            fetch: true,
            force: true
        });
    }
    /**
     * Fetches options from the pull request comments.
     * @returns Project releaser instance for chaining.
     */
    fetchOptions() {
        return this.enqueue(async () => {
            const { headBranch } = this.state;
            if (!headBranch) {
                throw new Error('Head branch is not set. Please call `checkout` before `fetchParams`.');
            }
            const { project, hosting, logger } = this;
            logger.info('fetch-options', 'Fetching options from pull request comments...');
            const { octokit } = hosting;
            const repositoryId = await hosting.getRepositoryId(project);
            const { data: [pr] } = await octokit.rest.pulls.list({
                ...repositoryId,
                head: `${repositoryId.owner}:${headBranch}`,
                state: 'open'
            });
            if (!pr) {
                logger.info('fetch-options', 'No open pull request found.');
                return;
            }
            const { data: comments } = await octokit.rest.issues.listComments({
                ...repositoryId,
                issue_number: pr.number
            });
            for (let i = comments.length - 1; i >= 0; i--) {
                const json = parseSetOptionsComment(comments[i]);
                if (json) {
                    try {
                        const options = JSON.parse(json);
                        logger.verbose('fetch-options', 'Found set-options comment:');
                        logger.verbose('fetch-options', json);
                        super.setOptions(options);
                    }
                    catch (error) {
                        logger.verbose('fetch-options', 'Failed to parse parameters comment:');
                        logger.verbose('fetch-options', json);
                    }
                    break;
                }
            }
        });
    }
    tag() {
        return super.tag({
            fetch: true
        });
    }
    push() {
        return super.push({
            force: true
        });
    }
    /**
     * Run all steps to create a pull request.
     */
    async runPullRequestAction() {
        await this
            .checkout()
            .fetchOptions()
            .bump()
            .commit()
            .push()
            .pullRequest()
            .run();
    }
    /**
     * Run all steps to release a new version.
     * @param check - Whether to check if the commit is a release commit.
     */
    async runReleaseAction(check = true) {
        await this
            .tag()
            .push()
            .release()
            .publish()
            .run(check ? ifReleaseCommit : undefined);
    }
    /**
     * Run action based on the context.
     */
    async runAction() {
        const { logger, gitClient } = this;
        logger.info('run', 'Detecting action...');
        const isSetOptionsComment = ifSetOptionsComment();
        let isReleaseCommit = false;
        if (isSetOptionsComment === false) {
            logger.info('run', 'Action triggered by a pull request comment.');
            logger.info('run', 'No set-options comment found in a comment. Stopping action.');
            await this.run();
            return;
        }
        if (isSetOptionsComment !== null) {
            logger.info('run', 'Action triggered by a pull request comment.');
            const currentBranch = await gitClient.getCurrentBranch();
            if (currentBranch !== isSetOptionsComment) {
                super.checkout(isSetOptionsComment, {
                    fetch: true,
                    force: false
                });
            }
        }
        else {
            isReleaseCommit = await ifReleaseCommit(this);
        }
        if (isReleaseCommit) {
            logger.info('run', 'Running release action...');
            await this.runReleaseAction(false);
        }
        else {
            logger.info('run', 'Running pull request action...');
            await this.runPullRequestAction();
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVsZWFzZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcmVsZWFzZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUdMLFFBQVEsRUFDVCxNQUFNLHNCQUFzQixDQUFBO0FBQzdCLE9BQU8sRUFFTCxhQUFhLEVBQ2QsTUFBTSx3QkFBd0IsQ0FBQTtBQUMvQixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxjQUFjLENBQUE7QUFDckQsT0FBTyxFQUNMLGVBQWUsRUFDZixtQkFBbUIsRUFDcEIsTUFBTSxpQkFBaUIsQ0FBQTtBQVN4QixNQUFNLE9BQU8sb0JBQWtELFNBQVEsUUFBMEI7SUFHL0YsWUFDRSxPQUF1QztRQUV2QyxLQUFLLENBQUM7WUFDSixPQUFPLEVBQUUsSUFBSSxhQUFhLENBQUM7Z0JBQ3pCLE9BQU8sRUFBRSxPQUFPLENBQUMsT0FBNkI7YUFDL0MsQ0FBQztZQUNGLEdBQUcsT0FBTztTQUNYLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFFUSxRQUFRLENBQUMsTUFBZTtRQUMvQixPQUFPLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFO1lBQzVCLFFBQVEsRUFBRSxxQkFBcUI7WUFDL0IsS0FBSyxFQUFFLDhDQUE4QztZQUNyRCxLQUFLLEVBQUUsSUFBSTtZQUNYLEtBQUssRUFBRSxJQUFJO1NBQ1osQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUVEOzs7T0FHRztJQUNILFlBQVk7UUFDVixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxJQUFJLEVBQUU7WUFDN0IsTUFBTSxFQUFFLFVBQVUsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUE7WUFFakMsSUFBSSxDQUFDLFVBQVUsRUFBRTtnQkFDZixNQUFNLElBQUksS0FBSyxDQUFDLHNFQUFzRSxDQUFDLENBQUE7YUFDeEY7WUFFRCxNQUFNLEVBQ0osT0FBTyxFQUNQLE9BQU8sRUFDUCxNQUFNLEVBQ1AsR0FBRyxJQUFJLENBQUE7WUFF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