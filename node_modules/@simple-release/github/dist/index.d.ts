import { Octokit } from '@octokit/rest';
import { type Project, type CreateReleaseOptions, type CreatePullRequestOptions, GitRepositoryHosting } from '@simple-release/core';
export { Octokit };
export interface GithubOptions {
    /**
     * The GitHub personal access token to authenticate with the GitHub API.
     */
    token?: string;
    /**
     * The GitHub Octokit instance to use for making API calls.
     */
    octokit?: Octokit;
    /**
     * The GitHub owner (username or organization) of the repository.
     * If not provided, it will be inferred from the remote URL.
     */
    owner?: string;
    /**
     * The GitHub project (repository name) to create releases in.
     * If not provided, it will be inferred from the remote URL.
     */
    project?: string;
}
export interface GithubCreatePullRequestOptions extends CreatePullRequestOptions {
    /**
     * Create a draft pull request.
     */
    draft?: boolean;
}
/**
 * A class that creates releases on GitHub using the GitHub REST API.
 */
export declare class GithubHosting extends GitRepositoryHosting {
    private readonly options;
    readonly octokit: Octokit;
    /**
     * Creates a new instance of the GitHub release creator.
     * @param options - The options for the GitHub release creator.
     */
    constructor(options: GithubOptions);
    getRepositoryId(project: Project): Promise<{
        owner: string;
        repo: string;
    }>;
    private hasRelease;
    createRelease(options: CreateReleaseOptions): Promise<void>;
    private getPullRequestData;
    createPullRequest(options: GithubCreatePullRequestOptions): Promise<void>;
}
//# sourceMappingURL=index.d.ts.map