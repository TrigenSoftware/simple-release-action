import { Octokit } from '@octokit/rest';
import { GitRepositoryHosting } from '@simple-release/core';
import { CHEATSHEET } from './cheatsheet.js';
export { Octokit };
const OK = 200;
const noop = () => { };
/**
 * A class that creates releases on GitHub using the GitHub REST API.
 */
export class GithubHosting extends GitRepositoryHosting {
    options;
    octokit;
    /**
     * Creates a new instance of the GitHub release creator.
     * @param options - The options for the GitHub release creator.
     */
    constructor(options) {
        super();
        this.options = options;
        this.octokit = options.octokit || new Octokit({
            auth: options.token
        });
        this.octokit.log = {
            debug: noop,
            info: noop,
            warn: noop,
            error: noop
        };
    }
    async getRepositoryId(project) {
        let { owner, project: repo } = this.options;
        if (!owner || !repo) {
            const info = await project.getHostedGitInfo();
            if (info) {
                if (!owner) {
                    owner = info.owner;
                }
                if (!repo) {
                    repo = info.project;
                }
            }
        }
        return {
            owner: owner,
            repo: repo
        };
    }
    async hasRelease(owner, repo, tag) {
        try {
            const { status } = await this.octokit.rest.repos.getReleaseByTag({
                owner,
                repo,
                tag
            });
            return status === OK;
        }
        catch {
            return false;
        }
    }
    async createRelease(options) {
        const { project, dryRun, logger } = options;
        const { octokit } = this;
        const data = await project.getReleaseData();
        if (!data.length) {
            logger?.info('No release data found. Skipping release creation.');
            return;
        }
        const repositoryId = await this.getRepositoryId(project);
        for (const releaseData of data) {
            if (await this.hasRelease(repositoryId.owner, repositoryId.repo, releaseData.nextTag)) {
                logger?.verbose(`Release ${releaseData.nextTag} already exists.`);
                continue;
            }
            const params = {
                ...repositoryId,
                tag_name: releaseData.nextTag,
                name: releaseData.title,
                body: releaseData.notes,
                prerelease: releaseData.isPrerelease
            };
            logger?.verbose('Creating release with params:');
            logger?.verbose(params);
            if (!dryRun) {
                await octokit.rest.repos.createRelease(params);
            }
        }
    }
    getPullRequestData(project, from, to) {
        const [title] = project.getCommitMessage().split('\n');
        const body = `${project.versionUpdates.map(({ name, notes }) => `# ${name}\n\n${notes.trim()}`).join('\n\n')}

---
This PR was generated with [simple-release](https://github.com/TrigenSoftware/simple-release).

<details>
<summary>ðŸ“„ Cheatsheet</summary>
<br>

${CHEATSHEET}

</details>

<!--
  Please do not edit this comment.
  simple-release-pull-request: true
  simple-release-branch-from: ${from}
  simple-release-branch-to: ${to}
-->
`;
        return {
            title,
            body
        };
    }
    async createPullRequest(options) {
        const { project, dryRun, logger, draft } = options;
        let { from, to } = options;
        const { gitClient } = project;
        if (!from) {
            from = await gitClient.getCurrentBranch();
        }
        if (!to) {
            to = await gitClient.getDefaultBranch();
        }
        if (from === to) {
            throw new Error('Cannot create a pull request from the same branch.');
        }
        const { octokit } = this;
        const repositoryId = await this.getRepositoryId(project);
        const { data: [pr] } = await octokit.rest.pulls.list({
            ...repositoryId,
            head: `${repositoryId.owner}:${from}`,
            state: 'open'
        });
        if (pr) {
            logger?.info(`Updating existing pull request #${pr.number}`);
        }
        const { title, body } = this.getPullRequestData(project, from, to);
        logger?.verbose('Pull request data:');
        if (!pr && draft) {
            logger?.verbose('Draft: true');
        }
        logger?.verbose(`${from} -> ${to}`);
        logger?.verbose(`Title: ${title}`);
        logger?.verbose(`Body:\n\n${body}`);
        if (!dryRun) {
            if (pr) {
                await octokit.rest.pulls.update({
                    ...repositoryId,
                    pull_number: pr.number,
                    title,
                    body
                });
            }
            else {
                await octokit.rest.pulls.create({
                    ...repositoryId,
                    title,
                    base: to,
                    head: from,
                    body,
                    draft
                });
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGVBQWUsQ0FBQTtBQUN2QyxPQUFPLEVBSUwsb0JBQW9CLEVBQ3JCLE1BQU0sc0JBQXNCLENBQUE7QUFDN0IsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGlCQUFpQixDQUFBO0FBRTVDLE9BQU8sRUFBRSxPQUFPLEVBQUUsQ0FBQTtBQThCbEIsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFBO0FBQ2QsTUFBTSxJQUFJLEdBQUcsR0FBRyxFQUFFLEdBQWUsQ0FBQyxDQUFBO0FBRWxDOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGFBQWMsU0FBUSxvQkFBb0I7SUFRbEM7SUFQVixPQUFPLENBQVM7SUFFekI7OztPQUdHO0lBQ0gsWUFDbUIsT0FBc0I7UUFFdkMsS0FBSyxFQUFFLENBQUE7UUFGVSxZQUFPLEdBQVAsT0FBTyxDQUFlO1FBSXZDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sSUFBSSxJQUFJLE9BQU8sQ0FBQztZQUM1QyxJQUFJLEVBQUUsT0FBTyxDQUFDLEtBQUs7U0FDcEIsQ0FBQyxDQUFBO1FBQ0YsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEdBQUc7WUFDakIsS0FBSyxFQUFFLElBQUk7WUFDWCxJQUFJLEVBQUUsSUFBSTtZQUNWLElBQUksRUFBRSxJQUFJO1lBQ1YsS0FBSyxFQUFFLElBQUk7U0FDWixDQUFBO0lBQ0gsQ0FBQztJQUVELEtBQUssQ0FBQyxlQUFlLENBQUMsT0FBZ0I7UUFDcEMsSUFBSSxFQUNGLEtBQUssRUFDTCxPQUFPLEVBQUUsSUFBSSxFQUNkLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQTtRQUVoQixJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ25CLE1BQU0sSUFBSSxHQUFHLE1BQU0sT0FBTyxDQUFD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