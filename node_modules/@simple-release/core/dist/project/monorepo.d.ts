import type { ReleaseData } from '../hosting/hosting.js';
import { type ProjectOptions, Project } from './project.js';
import type { MonorepoMode, MonorepoProjectOptions, MonorepoProjectBumpOptions } from './monorepo.types.js';
export * from './monorepo.types.js';
export declare abstract class MonorepoProject extends Project {
    /**
     * The mode of the monorepo.
     * If mode is 'fixed', all projects will be bumped to the same version.
     * If mode is 'independent', each project will be bumped to its own version.
     */
    mode: MonorepoMode;
    options: MonorepoProjectOptions & ProjectOptions;
    private projectsMutex;
    /**
     * Creates a new instance of the monorepo project.
     * @param options - The options to use for the monorepo project.
     */
    constructor(options: MonorepoProjectOptions);
    /**
     * Get the projects in the monorepo.
     * @yields The projects in the monorepo.
     */
    getProjects(): AsyncGenerator<Project, void, undefined>;
    /**
     * Get scope from project name.
     * @param name - The name of the project.
     * @returns The scope of the project.
     */
    getScope(name: string): Promise<string>;
    /**
     * Get tag prefix from scope.
     * @param scope - The scope of the project.
     * @returns The tag prefix for the project.
     */
    getTagPrefix(scope: string): Promise<string>;
    private getIndependentCommitMessage;
    getCommitMessage(): string;
    private getIndependentTags;
    getTags(): Promise<string[]>;
    private getIndependentReleaseData;
    getReleaseData(): Promise<ReleaseData[]>;
    private getBumpOptions;
    getNextVersion(options?: MonorepoProjectBumpOptions): Promise<string | null>;
    private independentBump;
    private fixedBump;
    bump(options?: MonorepoProjectBumpOptions): Promise<boolean>;
}
//# sourceMappingURL=monorepo.d.ts.map