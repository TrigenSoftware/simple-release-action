import fs from 'fs/promises';
import { findUp } from 'find-up-simple';
const VARIANTS = [
    '.simple-release.js',
    '.simple-release.mjs',
    '.simple-release.cjs',
    '.simple-release.json'
];
function validate(target, rules) {
    for (const [rule, required] of Object.entries(rules)) {
        if (required && target[rule] === undefined) {
            throw new Error(`Faild to load config: '${rule}' is required`);
        }
    }
}
const IMPORT_QUERY_REGEX = /^(@?[^@#]*)(@[^#]+)?(#.*)?$/;
export function parseImportQuery(importPath) {
    const match = importPath.match(IMPORT_QUERY_REGEX);
    if (!match) {
        return {
            path: importPath
        };
    }
    const [, path, version, symbol] = match;
    return {
        path,
        version: version?.slice(1),
        symbol: symbol?.slice(1)
    };
}
export async function loadClass(queryWithOptions, config, loader = _ => import(_)) {
    const [query, options] = Array.isArray(queryWithOptions)
        ? queryWithOptions
        : [queryWithOptions];
    const { path, version, symbol } = parseImportQuery(query);
    const module = await loader(path, version, config);
    const inst = new module[symbol || 'default'](options);
    return inst;
}
export function isQuery(value) {
    return typeof value === 'string' || (Array.isArray(value)
        && value.length === 2
        && typeof value[0] === 'string'
        && value[1] && typeof value[1] === 'object');
}
export function getQuery(queryWithOptions) {
    return isQuery(queryWithOptions)
        ? typeof queryWithOptions === 'string'
            ? queryWithOptions
            : queryWithOptions[0]
        : null;
}
async function loadAndSetIfQuery(config, key, loader) {
    const value = config[key];
    if (value && isQuery(value)) {
        // eslint-disable-next-line require-atomic-updates
        config[key] = await loadClass(value, config, loader);
    }
}
async function importConfig(path) {
    if (path.endsWith('.json')) {
        const json = await fs.readFile(path, 'utf-8');
        const config = JSON.parse(json);
        return config;
    }
    const module = await import(path);
    const config = 'default' in module ? module.default : module;
    return config;
}
export async function load(requirements = {}, loader) {
    const { config: configRequired, ...reqs } = requirements;
    for (const variant of VARIANTS) {
        const foundPath = await findUp(variant);
        if (foundPath) {
            try {
                const config = await importConfig(foundPath);
                validate(config, reqs);
                await loadAndSetIfQuery(config, 'project', loader);
                await loadAndSetIfQuery(config, 'hosting', loader);
                return config;
            }
            catch (err) {
                if (configRequired) {
                    throw err;
                }
                return null;
            }
        }
    }
    if (configRequired) {
        throw new Error('Config not found');
    }
    return null;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sYUFBYSxDQUFBO0FBQzVCLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQTtBQVF2QyxNQUFNLFFBQVEsR0FBRztJQUNmLG9CQUFvQjtJQUNwQixxQkFBcUI7SUFDckIscUJBQXFCO0lBQ3JCLHNCQUFzQjtDQUN2QixDQUFBO0FBK0NELFNBQVMsUUFBUSxDQUFDLE1BQTJCLEVBQUUsS0FBMEI7SUFDdkUsS0FBSyxNQUFNLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDcEQsSUFBSSxRQUFRLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLFNBQVMsRUFBRTtZQUMxQyxNQUFNLElBQUksS0FBSyxDQUFDLDBCQUEwQixJQUFJLGVBQWUsQ0FBQyxDQUFBO1NBQy9EO0tBQ0Y7QUFDSCxDQUFDO0FBRUQsTUFBTSxrQkFBa0IsR0FBRyw2QkFBNkIsQ0FBQTtBQUV4RCxNQUFNLFVBQVUsZ0JBQWdCLENBQzlCLFVBQWtCO0lBRWxCLE1BQU0sS0FBSyxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQTtJQUVsRCxJQUFJLENBQUMsS0FBSyxFQUFFO1FBQ1YsT0FBTztZQUNMLElBQUksRUFBRSxVQUFVO1NBQ2pCLENBQUE7S0FDRjtJQUVELE1BQU0sQ0FDSixBQURLLEVBRUwsSUFBSSxFQUNKLE9BQU8sRUFDUCxNQUFNLENBQ1AsR0FBRyxLQUFLLENBQUE7SUFFVCxPQUFPO1FBQ0wsSUFBSTtRQUNKLE9BQU8sRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUMxQixNQUFNLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7S0FDekIsQ0FBQTtBQUNI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