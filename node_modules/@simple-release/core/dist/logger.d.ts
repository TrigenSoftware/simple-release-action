export type Printer = (message: LoggerMessage) => void;
export interface LoggerOptions {
    silent?: boolean;
    dryRun?: boolean;
    verbose?: boolean;
    printer?: Printer;
}
export interface LoggerMessage {
    dryRun?: boolean;
    stage: string;
    message: unknown;
}
/**
 * A child messages logger that bounds to a specific stage.
 */
export declare class ChildLogger {
    parent: Logger;
    stage: string;
    /**
     * Creates a child logger instance.
     * @param parent - The parent logger to inherit options from.
     * @param stage - The stage of the process this logger is associated with.
     */
    constructor(parent: Logger, stage: string);
    /**
     * Logs an info message.
     * @param message - The message to log.
     */
    info(message: unknown): void;
    /**
     * Logs a verbose message.
     * @param message - The message to log.
     */
    verbose(message: unknown): void;
}
/**
 * A messages logger.
 */
export declare class Logger {
    options: LoggerOptions;
    readonly printer: Printer;
    /**
     * Creates a logger instance.
     * @param options - The logger options.
     */
    constructor(options?: LoggerOptions);
    /**
     * Logs an info message.
     * @param stage - The stage of the process.
     * @param message - The message to log.
     */
    info(stage: string, message: unknown): void;
    /**
     * Logs a verbose message.
     * @param stage - The stage of the process.
     * @param message - The message to log.
     */
    verbose(stage: string, message: unknown): void;
    /**
     * Creates a child logger for a specific stage.
     * @param stage - The stage of the process.
     * @returns A child logger for the specified stage.
     */
    createChild(stage: string): ChildLogger;
}
//# sourceMappingURL=logger.d.ts.map